# A. if the input is, for example, 234567
# the output would be 110000. make the first
# two digits 1 and the rest 0 and that should be
# the answer. 
#
# if 1100... is bigger than the inpt, eg 101111
# then the answer is the same but divided by ten
# so 101111 would give 11000

99
100
101
# 3

110
119
# 10

897
898 #
899
900
901 #
# 4

987
988  # 1000 - 12
1000
1010
1019
1020
1022 # 1000 + 22
1023 
# 34

1098
1099 # 1100 - 1
1100
1199
1200
1201
1202 # 1100 + 102
1203 # end of run
# 103

9876
9877 # 10000 - 123
9880
9900
...
9999
10000
10099
10100
10199
10200
10209
10210
10220
10221
10229
10230
10231
10233 # 10000 + 233
10234 # end of run
# 356 - biggest under 10988 + 356

10987
10988 # 11000 - 12
10989
10990
10999
11000
11999
12000
12009
12010
12019
12020
12029
12030
12031
12033 # 11000 + 1034 - 1
12034 # end of run
# 1046 - biggest under 98766 + 1046 : 99812

# starting at something other than 110000... seems suboptimal
21987
21988 # 22000 - 12
21999
22000
22999
23000
23009
23010
23013 # 22000 + 1013 #ends early when there is no leading 1
23014 
# 1025


98765
98766 # 100000 - 1234
100000
100999
101999
102000
102100
102200
102300
102309
102319
102329
102339
102340
102344 # 100000 + 2345 - 1
102345
# 3579


109876
109877 # 110000 - 123
109999
11....
1200..
1201..
1202..
12030.
12031.
12032.
12033.
120344 # 110000 + 10345 - 1
120345

1098765
1098766 # 1100000 - 1234
1099999
11.....
1200...
1201...
1202...
12030..
12031..
12032..
1203399
1203400
1203409
1203419
1203499
1203450
1203455 # 1100000 + 103456 - 1
1203456